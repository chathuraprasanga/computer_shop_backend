# Generated by Django 4.2.5 on 2023-09-27 16:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('brand_name', models.CharField(max_length=255)),
                ('brand_description', models.TextField(max_length=255)),
                ('brand_country', models.CharField(blank=True, max_length=255, null=True)),
                ('brand_status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DEACTIVE', 'DEACTIVE')], default='DEACTIVE', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('category_name', models.CharField(max_length=255)),
                ('category_description', models.TextField(max_length=255)),
                ('category_status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DEACTIVE', 'DEACTIVE')], default='DEACTIVE', max_length=8)),
                ('category_brands', models.ManyToManyField(to='App.brand')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.TimeField(auto_now_add=True)),
                ('customer_name', models.CharField(max_length=255)),
                ('customer_phone', models.CharField(max_length=10)),
                ('customer_email', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_address', models.TextField(blank=True, max_length=255, null=True)),
                ('customer_status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DEACTIVE', 'DEACTIVE')], default='DEACTIVE', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.TimeField(auto_now_add=True)),
                ('product_name', models.CharField(max_length=255)),
                ('product_buying_price', models.PositiveIntegerField()),
                ('product_selling_price', models.PositiveIntegerField()),
                ('product_status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DEACTIVE', 'DEACTIVE')], default='DEACTIVE', max_length=8)),
                ('product_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.brand')),
                ('product_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.category')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('supplier_name', models.CharField(max_length=255, unique=True)),
                ('supplier_company', models.CharField(max_length=255)),
                ('supplier_phone', models.CharField(max_length=10)),
                ('supplier_email', models.CharField(max_length=255)),
                ('supplier_address', models.TextField(max_length=255)),
                ('supplier_status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DEACTIVE', 'DEACTIVE')], default='DEACTIVE', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='SystemUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is_admin')),
                ('is_user', models.BooleanField(default=True, verbose_name='Is_user')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SupplierInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('product_quantity', models.PositiveIntegerField()),
                ('product_unit_price', models.PositiveIntegerField()),
                ('product_total_price', models.PositiveIntegerField()),
                ('product_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.product')),
            ],
        ),
        migrations.CreateModel(
            name='SupplierBill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('sub_total', models.PositiveIntegerField()),
                ('discount', models.PositiveIntegerField(blank=True, null=True)),
                ('net_total', models.PositiveIntegerField()),
                ('payment_method', models.CharField(choices=[('CASH', 'CASH'), ('CHQ', 'CHQ'), ('CREDIT', 'CREDIT')], default='CREDIT', max_length=6)),
                ('payment_status', models.CharField(choices=[('PAID', 'PAID'), ('NOT PAID', 'NOT PAID')], default='NOT PAID', max_length=8)),
                ('invoices', models.ManyToManyField(to='App.supplierinvoice')),
                ('supplier_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.supplier')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='product_supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.supplier'),
        ),
        migrations.CreateModel(
            name='CustomerInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('product_quantity', models.PositiveIntegerField()),
                ('product_unit_price', models.PositiveIntegerField()),
                ('product_total_price', models.PositiveIntegerField()),
                ('product_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.product')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerBill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('sub_total', models.PositiveIntegerField()),
                ('discount', models.PositiveIntegerField(blank=True, null=True)),
                ('net_total', models.PositiveIntegerField()),
                ('payment_method', models.CharField(choices=[('CASH', 'CASH'), ('CHQ', 'CHQ'), ('CREDIT', 'CREDIT')], default='CREDIT', max_length=6)),
                ('payment_status', models.CharField(choices=[('PAID', 'PAID'), ('NOT PAID', 'NOT PAID')], default='NOT PAID', max_length=8)),
                ('customer_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.customer')),
                ('invoices', models.ManyToManyField(to='App.customerinvoice')),
            ],
        ),
    ]
